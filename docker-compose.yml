---
version: '3.4'
services:

  # -- service stack --
  timestamp-command:
    build: ./timestamp-command-service
    restart: unless-stopped
    environment: 
      SERVER_PORT: 7080
      LOG_LEVEL: INFO
      KAFKA_BROKER: localhost:9092
      KAFKA_PUBLISH_TOPIC: timestamp.command.v1
    depends_on: 
      - broker
    ports: 
      - 7080:7080
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: '0.25'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 60s
      placement:
        constraints: [node.role == worker]
    network_mode: host

  timestamp-consumer:
    build: timestamp-consumer-service/
    restart: unless-stopped
    environment: 
      SERVER_PORT: 7081
      LOG_LEVEL: DEBUG
      KAFKA_BROKER: localhost:9092
      KAFKA_CONSUMER_TOPIC: timestamp.command.v1
      KAFKA_GROUP_ID: timestamp-consumer-service-1
      DB_URL: jdbc:postgresql://localhost:5432/postgres
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
    depends_on: 
      - broker
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: '0.25'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 60s
      placement:
        constraints: [node.role == worker]
    network_mode: host

  timestamp-query:
    build: timestamp-query-service/
    restart: unless-stopped
    environment: 
      SERVER_PORT: 7082
      DB_URL: jdbc:postgresql://localhost:5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
    depends_on: 
      - postgres
      - timestamp-consumer
    ports: 
      - 7082:7082
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: '0.25'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 60s
      placement:
        constraints: [node.role == worker]
    network_mode: host

# -- postgres stack (for dev)
  postgres:
    image: postgres:12.4-alpine
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    deploy:
      placement:
        constraints: [node.role == manager]
    network_mode: host

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: pgadmin4@pgadmin.org
      PGADMIN_DEFAULT_PASSWORD: postgres
    ports:
      - "7072:80"
    restart: unless-stopped
    depends_on: 
      - postgres
    deploy:
      placement:
        constraints: [node.role == manager]
    network_mode: host

# -- confluent kafka stack --  
  zookeeper:
    image: confluentinc/cp-zookeeper:5.5.1
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    deploy:
      placement:
        constraints: [node.role == manager]
    network_mode: host

  broker:
    image: confluentinc/cp-kafka:5.5.1
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'localhost:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
    deploy:
      placement:
        constraints: [node.role == manager]
    network_mode: host

  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "localhost:29092"
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    depends_on:
      - broker
    restart: unless-stopped
    deploy:
      placement:
        constraints: [node.role == manager]
    network_mode: host

# -- misc utils

  # port collision with kafdrop
  # portainer: 
  #   image: portainer/portainer
  #   command: -H unix:///var/run/docker.sock
  #   ports:
  #     - 7070:9000
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   deploy:
  #     mode: replicated
  #     replicas: 2
  #     placement:
  #       constraints: [node.role == manager]
  #   network_mode: host