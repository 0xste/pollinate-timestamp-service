---
version: '3'
services:
  # -- service stack --
  timestamp-command:
    build: ./timestamp-command-service
    restart: unless-stopped
    environment: 
      SERVER_PORT: 9000
      LOG_LEVEL: DEBUG
      KAFKA_BROKER: broker:9092
      KAFKA_PUBLISH_TOPIC: timestamp.command
    depends_on: 
      - broker
    ports: 
      - 9000:9000

  # timestamp-consumer:
  #   build: timestamp-consumer-service/
  #   restart: unless-stopped
  #   environment: 
  #     SERVER_PORT: 9000
  #     LOG_LEVEL: DEBUG
  #     KAFKA_BROKER: localhost:9092
  #     KAFKA_CONSUME_TOPIC: timestamp.command
  #   depends_on: 
  #     - broker

  # timestamp-query:
  #   build: timestamp-query-service/
  #   restart: unless-stopped
  #   environment: 
  #     SERVER_PORT: 9000
  #     DB_URL: localhost:9092
  #     # todo migrate to secrets
  #     url: "jdbc:postgresql://localhost:5432/postgres"
  #     username: postgres
  #     password: postgres
  #   depends_on: 
  #     - postgres

# -- postgres stack (for dev)
  postgres:
    image: postgres:12.4-alpine
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    deploy:
      placement:
        constraints: [node.role == manager]
  
  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: pgadmin4@pgadmin.org
      PGADMIN_DEFAULT_PASSWORD: postgres
    ports:
      - "7072:80"
    restart: unless-stopped
    depends_on: 
      - postgres
    deploy:
      placement:
        constraints: [node.role == manager]

# -- confluent kafka stack --  
  zookeeper:
    image: confluentinc/cp-zookeeper:5.5.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    deploy:
      placement:
        constraints: [node.role == manager]
  
  broker:
    image: confluentinc/cp-kafka:5.5.1
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
    deploy:
      placement:
        constraints: [node.role == manager]

  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "7071:9000"
    environment:
      KAFKA_BROKERCONNECT: "broker:29092"
      JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    depends_on:
      - broker
    restart: unless-stopped
    deploy:
      placement:
        constraints: [node.role == manager]

# -- misc utils

  # only works in swarm mode...
  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - 7073:8080
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]

  portainer:
    image: portainer/portainer
    command: -H unix:///var/run/docker.sock
    ports:
      - 7070:9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      placement:
        constraints: [node.role == manager]
